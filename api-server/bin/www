#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */
var winston = require('winston');
var debug = require('debug')('api-server:server');
var config = require('../config');
var db = require('../db');
var app = require('../app');
var http = require('http');
//var update = require('../update');

winston.log('info', 'Setting %s environment', config.env);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
winston.log('info', 'HTTP server listening in port %s', port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        winston.log('info', '%s requires elevated privileges', bind);
        process.exit(1);
        break;
    case 'EADDRINUSE':
        winston.log('info', '%s is already in use', bind);
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Uncaught exceptions handler
 */
process.on('uncaughtException', function (err) {
    winston.log('error', err.message, err);
});